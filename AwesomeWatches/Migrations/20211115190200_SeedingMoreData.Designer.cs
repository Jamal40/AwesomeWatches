// <auto-generated />
using AwesomeWatches.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AwesomeWatches.Migrations
{
    [DbContext(typeof(WatchesContext))]
    [Migration("20211115190200_SeedingMoreData")]
    partial class SeedingMoreData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AwesomeWatches.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Analog watches have displays with a miniature clock-face with 12 hours, an hour hand, and a minute hand.",
                            Name = "Analog Watch"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Digital Watch is a watch in which the hours, minutes, and sometimes seconds are indicated by digits, rather than by hands on a dial.",
                            Name = "Digital Watch"
                        },
                        new
                        {
                            Id = 3,
                            Description = "An automatic watch is a watch that continues to operate due to the regular motion of the wearer’s wrist.",
                            Name = "Automatic Watch"
                        },
                        new
                        {
                            Id = 4,
                            Description = "“Chronograph” is just a fancy word for “stopwatch.” Using a chronograph is easy. You just press the start/stop button on the side of the watch to start or stop the stopwatch;",
                            Name = "Chronograph Watch"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Diving Watch is a watch designed for underwater diving that features, water resistance greater upto 100 m (330 ft).",
                            Name = "Diving Watch"
                        },
                        new
                        {
                            Id = 6,
                            Description = "A dress watch is the most elegant of watches. It has one purpose and that’s to tell time. It need not have complications.",
                            Name = "Dress Watch"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A quartz watch is powered by an electronic oscillator synchronized by quartz crystal.",
                            Name = "Quartz Watch"
                        },
                        new
                        {
                            Id = 8,
                            Description = "A mechanical watch is a watch that uses a mechanism to measure the passage of time, as opposed to modern quartz watches which function electronically.",
                            Name = "Mechanical Watch"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Gracing the wrist of pilots, these aviation timepieces have reached the apex of the ideal fusion of style and durability.",
                            Name = "Pilot Watch"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Field Watch were designed for officers who needed to coordinate attacks, tell time at night, and sport a wristwatch that could withstand the rigors of battle, all while still looking good. ",
                            Name = "Field Watch"
                        },
                        new
                        {
                            Id = 11,
                            Description = "A smartwatch is a portable device that’s designed to be worn on the wrist, just like a traditional watch.",
                            Name = "Smart Watch"
                        },
                        new
                        {
                            Id = 12,
                            Description = "These watches are great for watch collectors or watch connoisseurs and the ones who appreciate great precision and handcrafted complications in a watch. Such watches are often encased in precious gemstones and other expensive materials.",
                            Name = "Luxury Watch"
                        });
                });

            modelBuilder.Entity("AwesomeWatches.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 8050m,
                            QuantityInStock = 5
                        },
                        new
                        {
                            Id = 2,
                            Price = 3600m,
                            QuantityInStock = 8
                        },
                        new
                        {
                            Id = 3,
                            Price = 18500m,
                            QuantityInStock = 1
                        },
                        new
                        {
                            Id = 4,
                            Price = 4300m,
                            QuantityInStock = 3
                        });
                });

            modelBuilder.Entity("AwesomeWatches.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dark Side of the Moon",
                            ItemId = 1,
                            Name = "Omega Speedmaster"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Carrera Calibre 16",
                            ItemId = 2,
                            Name = "Tag Heuer"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Unico Titanium 42mnm",
                            ItemId = 3,
                            Name = "Hunlot Big Bang"
                        },
                        new
                        {
                            Id = 4,
                            Description = "BR V2-94 Grade-Cotes",
                            ItemId = 4,
                            Name = "Bell & Ross"
                        });
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("AwesomeWatches.Models.Product", b =>
                {
                    b.HasOne("AwesomeWatches.Models.Item", "Item")
                        .WithOne("Product")
                        .HasForeignKey("AwesomeWatches.Models.Product", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("AwesomeWatches.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AwesomeWatches.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AwesomeWatches.Models.Item", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
